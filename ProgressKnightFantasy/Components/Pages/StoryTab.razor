@page "/quests"
@inherits GameTabPageBase
@using ProgressKnightFantasy.Game.Models

<MudPaper Class="pa-2" Elevation="0">
    <MudText Typo="Typo.h4" GutterBottom="true">Your Saga Begins</MudText>
    <MudText Typo="Typo.subtitle1" Class="mb-1">Adventurer Level: @GameState.CurrentGameData.CurrentRun.PlayerLevel.ToString("N0") (XP: @GameState.CurrentGameData.CurrentRun.PlayerXp.ToString("N1") / @GameDataDefinitions.CalculatePlayerXpForNextLevel(GameState.CurrentGameData.CurrentRun.PlayerLevel).ToString("N0"))</MudText>

    @if (!string.IsNullOrEmpty(GameState.CurrentGameData.CurrentJobId))
    {
        var jobDef = GameState.GetJobDefinitionById(GameState.CurrentGameData.CurrentJobId);
        if (jobDef != null)
        {
            <MudText Typo="Typo.body2" Class="mb-2">Current Profession: @jobDef.Name (Rank @GameState.GetJobLevel(jobDef.Id))</MudText>
        }
    }
    else if (!string.IsNullOrEmpty(GameState.CurrentGameData.CurrentTaskName))
    {
        var taskDef = GameState.GetTaskDefinitionById(GameState.CurrentGameData.CurrentTaskName);
        if (taskDef != null)
        {
            <MudText Typo="Typo.body2" Class="mb-2">Current Activity: @taskDef.Name (Lvl @GameState.GetTaskLevel(taskDef.Id))</MudText>
        }
    }
    else if (!string.IsNullOrEmpty(GameState.CurrentGameData.CurrentEnemyId))
    {
        var enemyDef = GameDataDefinitions.GetEnemyById(GameState.CurrentGameData.CurrentEnemyId);
        if (enemyDef != null)
        {
            <MudText Typo="Typo.body2" Color="Color.Error" Class="mb-2">In Combat With: @enemyDef.Name</MudText>
        }
    }
    else
    {
        <MudText Typo="Typo.body2" Class="mb-2">Awaiting your command, adventurer.</MudText>
    }

    <MudGrid Spacing="2">
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Class="pa-2" Elevation="1">
                <MudText Typo="Typo.h6">Realm Status</MudText>
                <MudText Typo="Typo.body2">Days Passed: @GameState.CurrentGameData.Days.ToString("N0")</MudText>
                <MudText Typo="Typo.body2">Silver Pieces: @GameState.CurrentGameData.Coins.ToString("N2")</MudText>
                <MudText Typo="Typo.body2">Time This Age: @GameState.FormatTimeSpan(TimeSpan.FromSeconds(GameState.CurrentGameData.CurrentRun.TimeThisRun))</MudText>
                <MudText Typo="Typo.caption">Total Time Chronicled: @GameState.FormatTimeSpan(TimeSpan.FromSeconds(GameState.CurrentGameData.TimePlayedTotal))</MudText>
                <MudText Typo="Typo.body2">Paused: @GameState.CurrentGameData.Paused</MudText>
                <MudButton Variant="Variant.Filled" Color="GameState.CurrentGameData.Paused ? Color.Success : Color.Warning" OnClick="GameState.TogglePause" FullWidth="true" Class="mt-2" Size="Size.Small">
                    @(GameState.CurrentGameData.Paused ? "Resume Chronicle" : "Pause Chronicle")
                </MudButton>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="8">
            <MudPaper Class="pa-2" Elevation="1" Style="min-height: 190px;">
                <MudText Typo="Typo.h6">Current Focus</MudText>
                @if (!string.IsNullOrEmpty(GameState.CurrentGameData.CurrentTaskName))
                {
                    var currentTaskDef = GameState.GetTaskDefinitionById(GameState.CurrentGameData.CurrentTaskName);
                    if (currentTaskDef != null)
                    {
                        <MudText Typo="Typo.subtitle1">Undertaking: <strong>@currentTaskDef.Name</strong> (Lvl: @GameState.GetTaskLevel(currentTaskDef.Id))</MudText>
                        <MudText Typo="Typo.body2" Class="mb-1">@currentTaskDef.Description</MudText>
                        <MudProgressLinear Size=Size.Large Color="@((MudBlazor.Color)Enum.Parse(typeof(MudBlazor.Color), currentTaskDef.ThemeColor.Split('.').Last(), true))" Value="@GameState.GetTaskProgressPercent(currentTaskDef.Id)" Class="my-1">
                            <MudText Typo="Typo.caption" Class="px-1">@GameState.GetTaskCurrentXp(currentTaskDef.Id).ToString("N1") / @GameState.CalculateXpForNextLevel(currentTaskDef, GameState.GetTaskLevel(currentTaskDef.Id)).ToString("N0") XP</MudText>
                        </MudProgressLinear>
                        <MudButton Variant="Variant.Outlined" OnClick='() => GameState.SetCurrentTask(null)' FullWidth="true" Size="Size.Small">Cease Activity</MudButton>
                    }
                }
                else if (!string.IsNullOrEmpty(GameState.CurrentGameData.CurrentJobId))
                {
                    var currentJobDef = GameState.GetJobDefinitionById(GameState.CurrentGameData.CurrentJobId);
                    if (currentJobDef != null)
                    {
                        <MudText Typo="Typo.subtitle1">Profession: <strong>@currentJobDef.Name</strong> (Rank: @GameState.GetJobLevel(currentJobDef.Id))</MudText>
                        <MudText Typo="Typo.body2" Class="mb-1">@currentJobDef.Description</MudText>
                        <MudProgressLinear Size=Size.Large Color="@((MudBlazor.Color)Enum.Parse(typeof(MudBlazor.Color), currentJobDef.ThemeColor.Split('.').Last(), true))" Value="@GameState.GetJobProgressPercent(currentJobDef.Id)" Class="my-1">
                            <MudText Typo="Typo.caption" Class="px-1">@GameState.GetJobCurrentXp(currentJobDef.Id).ToString("N1") / @GameState.CalculateJobXpForNextLevel(currentJobDef, GameState.GetJobLevel(currentJobDef.Id)).ToString("N0") XP</MudText>
                        </MudProgressLinear>
                        <MudButton Variant="Variant.Outlined" OnClick='() => GameState.StopJob()' FullWidth="true" Size="Size.Small">Stop Profession</MudButton>
                    }
                }
                else if (!string.IsNullOrEmpty(GameState.CurrentGameData.CurrentEnemyId))
                {
                    var enemyDef = GameDataDefinitions.GetEnemyById(GameState.CurrentGameData.CurrentEnemyId);
                    if (enemyDef != null)
                    {
                        <MudAlert Severity="Severity.Warning" Dense="true">Engaged in battle with @enemyDef.Name!</MudAlert>
                    }
                }
                else
                {
                    <MudText>No current focus. Select an activity below.</MudText>
                }
            </MudPaper>
        </MudItem>

        <MudItem xs="12"><MudText Typo="Typo.h5" Class="mt-3 mb-1">Available Quests & Training Activities</MudText></MudItem>
        @foreach (var task in GameState.AllTasks.OrderBy(t => !GameState.IsTaskActuallyAvailable(t.Id)).ThenBy(t => t.Category).ThenBy(t => t.Name))
        {
            bool isAvailable = GameState.IsTaskActuallyAvailable(task.Id); bool isCurrent = GameState.CurrentGameData.CurrentTaskName == task.Id;
            string taskThemeColor = task.ThemeColor.Split('.').Last().ToLower();
            string availableOpacity = isAvailable ? "" : "opacity: 0.65;";
            string classStyle = $"border-left: 4px solid var(--mud-palette-{taskThemeColor}); {availableOpacity}";

            <MudItem xs="12" sm="6" md="4">
                <MudCard Elevation="isCurrent ? 3 : (isAvailable ? 1 : 0)" Style="classStyle" Class="mb-2">
                    <MudCardHeader Class="pa-2"><CardHeaderContent><MudText Typo="Typo.h6">@task.Name (Lvl: @GameState.GetTaskLevel(task.Id))</MudText><MudText Typo="Typo.caption">Category: @task.Category</MudText></CardHeaderContent></MudCardHeader>
                    <MudCardContent Class="pa-2">
                        <MudText Typo="Typo.body2" Class="mb-1">@task.Description</MudText>
                        <MudText Typo="Typo.caption">Activity XP/sec: @task.XpGainPerTick.ToString("N1") | Adventurer XP/sec: @task.PlayerXpRewardPerTick.ToString("N1")</MudText>
                        @if (!isAvailable && !string.IsNullOrEmpty(GameState.GetTaskRequirementsTooltip(task.Id)))
                        {
                            <MudTooltip Text="@GameState.GetTaskRequirementsTooltip(task.Id)" MaxWidth="MaxWidth.Small" Arrow="true" Placement="Placement.Bottom"><MudText Typo="Typo.caption" Color="Color.Warning" Class="mt-1">Locked</MudText></MudTooltip>
                        }
                        @if (task.RewardsPerLevel.Any())
                        {
                            <MudText Typo="Typo.caption" Class="mt-1">Rewards/Lvl: @string.Join(", ", task.RewardsPerLevel.Select(r => $"{r.Value} {r.Key.Replace("_xp_direct", " Lvl")}"))</MudText>
                        }
                        @if (task.Unlocks.Any())
                        {
                            <MudText Typo="Typo.caption" Class="mt-1">Unlocks: @string.Join(", ", task.Unlocks.Select(u => (GameState.GetTaskDefinitionById(u.Substring(u.IndexOf(':') + 1))?.Name ?? GameState.GetSkillDefinitionById(u.Substring(u.IndexOf(':') + 1))?.Name ?? GameState.GetJobDefinitionById(u.Substring(u.IndexOf(':') + 1))?.Name ?? u.Substring(u.IndexOf(':') + 1))))</MudText>
                        }
                        @if (isAvailable)
                        {
                            <MudProgressLinear Size="Size.Large" Color="@((MudBlazor.Color)Enum.Parse(typeof(MudBlazor.Color), task.ThemeColor.Split('.').Last(), true))" Striped="isCurrent" Value="@GameState.GetTaskProgressPercent(task.Id)" Class="my-1"><MudText Typo="Typo.caption" Class="px-1">@GameState.GetTaskCurrentXp(task.Id).ToString("N1") / @GameState.CalculateXpForNextLevel(task, GameState.GetTaskLevel(task.Id)).ToString("N0") XP</MudText></MudProgressLinear>
                        }
                    </MudCardContent>
                    <MudCardActions Class="pa-1">
                        @if (isCurrent)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick='() => GameState.SetCurrentTask(null)' FullWidth="true" Size="Size.Small">Cease Activity</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick='() => GameState.SetCurrentTask(task.Id)' Disabled="!isAvailable || !string.IsNullOrEmpty(GameState.CurrentGameData.CurrentJobId) || !string.IsNullOrEmpty(GameState.CurrentGameData.CurrentEnemyId)" FullWidth="true" Size="Size.Small">Undertake</MudButton>
                        }
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudPaper>